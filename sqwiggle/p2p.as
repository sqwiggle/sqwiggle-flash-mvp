package sqwiggle {	import flash.display.LoaderInfo;	import flash.display.Sprite;	import flash.display.StageAlign;	import flash.external.ExternalInterface;	import flash.net.NetConnection;	import flash.events.MouseEvent;	import sqwiggle.Self;	import sqwiggle.Member;	import sqwiggle.Conversation;	import sqwiggle.VideoPanel;	import sqwiggle.P2pEvent;	import flash.media.Video;	import flash.events.Event;		public class p2p extends Sprite {				var parameters 			:Object;		var self      			:Self;		var conversation		:Conversation;		var panel				:VideoPanel;				public function p2p() {			parameters = LoaderInfo(this.root.loaderInfo).parameters;			stage.align = StageAlign.TOP;						trace('p2p', parameters.userId);			ExternalInterface.addCallback('addMembers', addMembers);			ExternalInterface.addCallback('addMember',  addMember);			ExternalInterface.addCallback('removeMember',  removeMember);			//ExternalInterface.addCallback('addConversationMembers',  updateConversation);			//ExternalInterface.addCallback('removeConversationMember',  updateConversation);			self = new Self(parameters.userId);			panel = new VideoPanel(self);						addChild(panel);		}						/*		 * addMembers		 *		 * When joining a chat for the first time this method is called		 * to connect all of the existing participants in the video call.		*/		public function addMembers(strIds:String, strPeerIds:String):void {			trace('addMembers', strIds, strPeerIds);						// convert comma separated input into array of ids			var userIds:Array = strIds.split(',');			var peerIds:Array = strPeerIds.split(',');						for (var i = 0; i < peerIds.length; i++) {				addMember(userIds[i], peerIds[i]);			}		}						/*		 * addMember		 *		 * When a new user joins the chat this method is called to connect		 * them to the stream		*/		public function addMember(memberId:String, peerId:String):void {			trace('addMember', memberId, peerId);						// prevent multiple connections if the user opens another tab			if (self.userId === memberId) return;						// create a new member			var member:Member = new Member(memberId, peerId);			//member.addEventListener(MouseEvent.CLICK, createConversation);						// add to the video panel			panel.addMember(member);		}						/*		 * removeMember		 *		 * When an existing user leaves the room or is otherwise disconnected		 * from the video feed.		*/		public function removeMember(memberId:String) {			trace('removeMember', memberId);			panel.removeMember(memberId);		}						/*		public function updateConversation(strIds:String):void {			trace('Updating conversation with users', strIds);						var userIds:Array = strIds    .split(',');			conversation = new Array();						// for all members in the company			memberLoop: for (var j in members) {								// for all the peers in the conversation				for (var i = 0; i < userIds.length; i++) {					// if this member should be in the conversation					if (members[j].userId == userIds[i]) {						trace('adding member to conversation', members[j].userId);												members[j].audioOn();						conversation.push(members[j]);						continue memberLoop;					}				}								// not in conversation				members[j].audioOff();			}		}				private function createConversation(event:MouseEvent):void {						// already existing connection			if (audioConnection) {								// TODO: make sure that this connection is to the correct people				// TODO: ensure mic is unmuted									// no connection available, were creating a new audio chat			} else {				trace('Initialising new conversation');				conversationInitiator = true;				// add this user to the conversation				conversation.push(event.target);				conversation.push(self);								self.audioOn();				sendConversationUpdate();			}		}						private function sendConversationUpdate():void {			trace('Sending audio requests');						var userIds:Array = new Array();			for (var i in conversation) {				userIds.push(conversation[i].userId);			}						ExternalInterface.call('sendConversationUpdate', userIds.join(','));		}		*/	}}