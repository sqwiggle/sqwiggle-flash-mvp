package com.sqwiggle {	import flash.display.Sprite;	import flash.display.Shape;	import flash.display.MovieClip;	import flash.media.Video;	import flash.net.NetConnection;	import flash.net.NetStream;	import flash.net.NetStreamInfo;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.NetStatusEvent;	import flash.text.TextField;	import flash.text.TextFormat;	import fl.transitions.Tween;	import fl.transitions.easing.*;	public class Member extends Sprite {				public static const MAX_WIDTH = 400;		public static const MAX_HEIGHT = 300;		public static const INFOBAR_HEIGHT = 35;		public var connection	:NetConnection;		public var userId		:String;		public var peerId		:String;		public var userName		:String;				protected var stream	:NetStream;		protected var video 	:Video;		protected var infoBar	:Sprite;		protected var activity	:MovieClip;		public function Member(userId:String, peerId:String, userName:String='Anonymous') {			this.userId = userId;			this.peerId = peerId;			this.userName = userName;			render(300, 225);						addEventListener(MouseEvent.MOUSE_OVER, hoverOver);			addEventListener(MouseEvent.MOUSE_OUT, hoverOut);			addEventListener(Event.ENTER_FRAME, updateActivity);		}				public function render(w:Number, h:Number):void {						w = Math.min(Member.MAX_WIDTH, w);			h = Math.min(Member.MAX_HEIGHT, h);						if (!video) {				video = new Video();				addChild(video);			}						if (!activity) {				activity = new ActivityIndicator();				addChild(activity);			}						activity.x = 0;			activity.y = w;			activity.visible = false;			video.width  = w;			video.height = h;						drawInfoBar();		}				private function drawInfoBar():void {						if (infoBar) removeChild(infoBar);			infoBar = new Sprite();			infoBar.y = video.height-Member.INFOBAR_HEIGHT;			infoBar.alpha = 0;			addChild(infoBar);			var opaqueBar = new Sprite();			opaqueBar.graphics.beginFill(0x000000, 0.3);			opaqueBar.graphics.drawRect(0,0,video.width,Member.INFOBAR_HEIGHT);			opaqueBar.graphics.endFill();			infoBar.addChild(opaqueBar);						var textFormat:TextFormat = new TextFormat();			textFormat.font = "Arial";			textFormat.size = 20;						var nameField = new TextField();			nameField.x = 10;			nameField.y = 4; // padding			nameField.width = video.width;			nameField.height = infoBar.height;			nameField.selectable = false;			nameField.textColor = 0xFFFFFF;			nameField.text = userName;			nameField.setTextFormat(textFormat);			nameField.alpha = 0.8;						infoBar.addChild(nameField);		}						public function connectToVideo(connection:NetConnection):void {			trace('Connecting to video of: ' + userId + ', stream: ' + peerId);						stream = new NetStream(connection, peerId);			stream.addEventListener(NetStatusEvent.NET_STATUS, onNetStatus);			stream.receiveAudio(false);			stream.play(userId);			video.attachNetStream(stream);		}				public function disconnectFromVideo():void {			removeChild(video);			stream.close();		}				public function updateActivity(event:Event):void {			var bytes:Number = stream.info.audioBytesPerSecond;						if (bytes) {				var maxActivityLevel = 5500;				var activityLevel = (Math.max(0, bytes-1000)/100) / (maxActivityLevel/100)				trace('Mic Activity', Math.round(activityLevel));				activity.alpha = activityLevel;			}		}				public function audioOn(conversationInProgress:Boolean=false):void {			stream.receiveAudio(true);			activity.visible = true;						if (conversationInProgress) {				new Tween(video, "alpha", Regular.easeIn, 1, alpha, 0.5, true);			}		}				public function audioOff(conversationInProgress:Boolean=false):void {			stream.receiveAudio(false);			activity.visible = false;			if (conversationInProgress) {				new Tween(video, "alpha", Regular.easeIn, 1, alpha, 1, true);			}		}				public function onNetStatus(event:NetStatusEvent):void {			trace('Net status ' + peerId + ': ' + event.info.code);		}				private function hoverOver(event:MouseEvent):void {			new Tween(infoBar, "alpha", Regular.easeIn, 0, 1, 0.3, true);		}				private function hoverOut(event:MouseEvent):void {			new Tween(infoBar, "alpha", Regular.easeIn, 1, 0, 0.3, true);		}	}}